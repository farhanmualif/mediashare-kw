<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bootstrap demo</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
      crossorigin="anonymous" />
  </head>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
    <!-- <div id="display" class="w-25" style="display: none"></div>
    <div id="list-text"></div> -->

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
      crossorigin="anonymous"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
      crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
      let socket = io();

      //  const display = document.getElementById("display");
      const list_text = document.getElementById("list-text");
      const name = document.getElementById("name");
      const message = document.getElementById("message");
      const nominal = document.getElementById("nominal");
      let duration;

      function getIDfromURL(url) {
        const regExp =
          /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        const match = url.match(regExp);
        if (match && match[2].length === 11) {
          return match[2];
        }
        console.log("The supplied URL is not a valid youtube URL");
        return "";
      }

      // embed video 2
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement("script");

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName("script")[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.

      var player;
      let videoPlaying;
      let videoQueue = [];

      function onYouTubeIframeAPIReady() {
        console.log("onYouTubeIframeAPIReady... ");
        socket.on("newData", (data) => {
          

          videoQueue.push({
            videoId: getIDfromURL(data.linkMedia),
            startAtSecond: data.startAtSecond,
            duration: data.duration,
          });

          try {
            if (!videoPlaying) {
              playNextVideo();
            }
            /**playTheVideo(
              getIDfromURL(data.linkMedia),
              data.startAtSecond,
              data.duration
            );**/
          } catch (e) {
            console.log(e);
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }
      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function stopVideo() {
        console.log("video stop");
        player.stopVideo();
        player.destroy();
        videoPlaying = false;

        // playNextVideo();
      }

      // call this function will play a video on browser
      function playTheVideo(videoId, startAtSecond, duration) {
        const endSecond = startAtSecond + duration;
        player = new YT.Player("player", {
          height: "390",
          width: "640",
          videoId: videoId,
          playerVars: {
            playsinline: 1,
            start: startAtSecond,
            end: endSecond,
            autoPlay: 1,
            controls: 0,
          },
          events: {
            onReady: onPlayerReady,
            onStateChange: (event) => {
              if (event.data == YT.PlayerState.PLAYING) {
                setTimeout(stopVideo, duration * 1000);
              }
            }, // onPlayerStateChange
          },
        });
        videoPlaying = true;
      }

      function playNextVideo() {
        if (videoQueue.length === 0) {
          return;
        }

        const stack = videoQueue.shift();
        try {
          playTheVideo(stack.videoId, stack.startAtSecond, stack.duration);
        } catch (err) {
          throw err;
        }
      }
    </script>
  </body>
</html>
